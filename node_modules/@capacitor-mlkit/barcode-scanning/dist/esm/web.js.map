{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAmB/E,MAAM,OAAO,iBACX,SAAQ,SAAS;IAGjB,KAAK,CAAC,SAAS,CAAC,QAA2B;QACzC,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,qBAAqB,CACzB,QAAsC;QAEtC,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,WAAW;QACf,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,WAAW;QACf,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,WAAW;QACf,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,QAA6B;QAC9C,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,qCAAqC;QACzC,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,iCAAiC;QACrC,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAEO,0BAA0B;QAChC,OAAO,IAAI,kBAAkB,CAC3B,uEAAuE,EACvE,aAAa,CAAC,WAAW,CAC1B,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { CapacitorException, ExceptionCode, WebPlugin } from '@capacitor/core';\n\nimport type {\n  BarcodeScannerPlugin,\n  GetMaxZoomRatioResult,\n  GetMinZoomRatioResult,\n  GetZoomRatioResult,\n  IsGoogleBarcodeScannerModuleAvailableResult,\n  IsSupportedResult,\n  IsTorchAvailableResult,\n  IsTorchEnabledResult,\n  PermissionStatus,\n  ReadBarcodesFromImageOptions,\n  ReadBarcodesFromImageResult,\n  ScanResult,\n  SetZoomRatioOptions,\n  StartScanOptions,\n} from './definitions';\n\nexport class BarcodeScannerWeb\n  extends WebPlugin\n  implements BarcodeScannerPlugin\n{\n  async startScan(_options?: StartScanOptions): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async stopScan(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async readBarcodesFromImage(\n    _options: ReadBarcodesFromImageOptions,\n  ): Promise<ReadBarcodesFromImageResult> {\n    throw this.createUnavailableException();\n  }\n\n  async scan(): Promise<ScanResult> {\n    throw this.createUnavailableException();\n  }\n\n  async isSupported(): Promise<IsSupportedResult> {\n    throw this.createUnavailableException();\n  }\n\n  async enableTorch(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async disableTorch(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async toggleTorch(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async isTorchEnabled(): Promise<IsTorchEnabledResult> {\n    throw this.createUnavailableException();\n  }\n\n  async isTorchAvailable(): Promise<IsTorchAvailableResult> {\n    throw this.createUnavailableException();\n  }\n\n  async setZoomRatio(_options: SetZoomRatioOptions): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async getZoomRatio(): Promise<GetZoomRatioResult> {\n    throw this.createUnavailableException();\n  }\n\n  async getMinZoomRatio(): Promise<GetMinZoomRatioResult> {\n    throw this.createUnavailableException();\n  }\n\n  async getMaxZoomRatio(): Promise<GetMaxZoomRatioResult> {\n    throw this.createUnavailableException();\n  }\n\n  async openSettings(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async isGoogleBarcodeScannerModuleAvailable(): Promise<IsGoogleBarcodeScannerModuleAvailableResult> {\n    throw this.createUnavailableException();\n  }\n\n  async installGoogleBarcodeScannerModule(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    throw this.createUnavailableException();\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    throw this.createUnavailableException();\n  }\n\n  private createUnavailableException(): CapacitorException {\n    return new CapacitorException(\n      'This Barcode Scanner plugin method is not available on this platform.',\n      ExceptionCode.Unavailable,\n    );\n  }\n}\n"]}